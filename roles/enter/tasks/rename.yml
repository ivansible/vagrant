---
- name: rename user in system files (slow way)
  block:
    - name: fix user name and home in passwd files
      ansible.builtin.replace:
        regexp: "{{ item.0.src }}"
        replace: "{{ item.0.dst }}"
        path: "{{ item.1 }}"
      with_nested:
        - - {src: "^{{ old_user }}:",
             dst: "{{ new_user }}:"}
          - {src: ":{{ old_home }}:",
             dst: ":{{ new_home }}:"}
        - - /etc/passwd
          - /etc/passwd-
          - /etc/subuid
          - /etc/subgid
      loop_control:
        label: "{{ item.1 }} {{ item.0.src }}"

    - name: fix user name in group files
      ansible.builtin.replace:
        regexp: "{{ item.0.src }}"
        replace: "{{ item.0.dst }}"
        path: "{{ item.1 }}"
      with_nested:
        - - {src: "^{{ old_user }}:",
             dst: "{{ new_user }}:"}
          - {src: ":{{ old_user }}$",
             dst: ":{{ new_user }}"}
          - {src: ",{{ old_user }}$",
             dst: ",{{ new_user }}"}
        - - /etc/group
          - /etc/group-
          - /etc/shadow
          - /etc/shadow-
          - /etc/gshadow
          - /etc/gshadow-
      loop_control:
        label: "{{ item.1 }} {{ item.0.src }}"

    - name: get list of sudoers files
      ansible.builtin.find:
        path: /etc/sudoers.d
        excludes: README
      register: sudoers_files

    - name: fix user name in sudoers files
      ansible.builtin.replace:
        regexp: "^{{ old_user }}"
        replace: "{{ new_user }}"
        path: "{{ item }}"
      with_flattened: "{{ [sudoers_files |json_query('files[].path'), '/etc/sudoers'] }}"
      loop_control:
        label: "{{ item }} ^{{ old_user }}"
  when: not linen_use_quick_way |bool


- name: rename user in system files (quick way)
  block:
    - name: fix user name and home in passwd files
      ansible.builtin.command: >
        sed -i
            -e 's!^{{ old_user }}:!{{ new_user }}:!'
            -e 's!:/home/{{ old_user }}:!:/home/{{ new_user }}:!'
          /etc/passwd
          /etc/passwd-
          /etc/subuid
          /etc/subgid
      changed_when: linen_expose_changes |bool
      tags: skip_ansible_lint  # noqa 303 (no effect!)

    - name: fix user name in group files
      ansible.builtin.command: >
        sed -i
            -e 's!^{{ old_user }}:!{{ new_user }}:!'
            -e 's!:{{ old_user }}$!:{{ new_user }}!'
            -e 's!,{{ old_user }}$!,{{ new_user }}!'
          /etc/group
          /etc/group-
          /etc/shadow
          /etc/shadow-
          /etc/gshadow
          /etc/gshadow-
      changed_when: linen_expose_changes |bool
      tags: skip_ansible_lint  # noqa 303 (no effect!)

    - name: fix user name in sudoers files
      ansible.builtin.shell:
        sed -i
            -e 's!^{{ old_user }}!{{ new_user }}!'
          /etc/sudoers
          /etc/sudoers.d/*
      changed_when: linen_expose_changes |bool
      tags: skip_ansible_lint  # noqa 303 (no effect!)
  when: linen_use_quick_way |bool


# 'raw' is better becase 'command'/'shell' modules depend on home directory
# 'async'+'poll' prevents the unreachable error, but incompatible with 'raw'
# after testing many combinations, 'command' is the only viable alternative
- name: move home directory
  ansible.builtin.command:
    cmd: mv "{{ old_home }}" "{{ new_home }}"
    removes: "{{ old_home }}"
    creates: "{{ new_home }}"
  ignore_errors: true
  register: move_home_result


# reconnect early after directory has moved
- name: switch connection to renamed user
  ansible.builtin.set_fact:
    ansible_ssh_user: "{{ new_user }}"

- name: wait for reconnection
  ansible.builtin.wait_for_connection:
    timeout: "{{ linen_wait_timeout }}"
  register: result
  until: result is successful
  retries: "{{ linen_conn_retries }}"


- name: stat the new home directory
  ansible.builtin.stat:
    path: "{{ new_home }}"
  register: new_home_state

- name: assert that new home directory exists
  ansible.builtin.assert:
    that:
      - new_home_state.stat.exists
      - new_home_state.stat.isdir
    msg:
      - "There was an error moving home directory"
      - "{{ move_home_result.msg | d(move_home_result) }}"
    quiet: 128

- name: ensure old directory is removed
  ansible.builtin.file:
    path: "{{ old_home }}"
    state: absent

- name: remove temporary files in the new directory
  ansible.builtin.file:
    path: "{{ new_home }}/.ansible"
    state: absent
  failed_when: false
...
